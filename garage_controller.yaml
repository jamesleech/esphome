esphome:
  name: garagecontroller
  friendly_name: Garage BLE Controller
  min_version: 2025.5.0
  name_add_mac_suffix: false

esp32:
  board: esp32dev # FUTURE:, confirm board type - esp_wroom_02
  framework:
    type: esp-idf

external_components:
  # use ble_client_hid from this master branch in GitHub
  # - source: github://fsievers22/esphome-ble-remote@master
  - source: github://jamesleech/esphome-ble-remote/@master
    components: [ble_client_hid]

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid_ext # wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "ble_controller_wifi"
    password: !secret wifi_password
  domain: ".local"

captive_portal:

web_server:

esp32_ble_tracker:
  on_ble_advertise:
    - mac_address:
        # - 2B:80:3C:97:16:7E
        - 2A:07:98:00:B9:BD
      then:
        - lambda: |-
            ESP_LOGD("ble_adv", "New BLE device");
            ESP_LOGD("ble_adv", "  address: %s", x.address_str().c_str());
            ESP_LOGD("ble_adv", "  name: %s", x.get_name().c_str());
            ESP_LOGD("ble_adv", "  Advertised service UUIDs:");
            for (auto uuid : x.get_service_uuids()) {
                ESP_LOGD("ble_adv", "    - %s", uuid.to_string().c_str());
            }
            ESP_LOGD("ble_adv", "  Advertised service data:");
            for (auto data : x.get_service_datas()) {
                ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
            }
            ESP_LOGD("ble_adv", "  Advertised manufacturer data:");
            for (auto data : x.get_manufacturer_datas()) {
                ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
            }
  on_ble_service_data_advertise:
    - mac_address: 2A:07:98:00:B9:BD #2B:80:3C:97:16:7E
      service_uuid: "1812"
      then:
        - lambda: |-
            ESP_LOGD("ble_sd", "New BLE device");
            ESP_LOGD("ble_sd", "service state %n", x[0]);

# Camera Tag
ble_client:
  - mac_address: 2B:80:3C:97:16:7E
    id: ble_camera_tag
    auto_connect: true
  - mac_address: 2A:07:98:00:B9:BD
    id: ble_remote_shutter_tag
    auto_connect: true

ble_client_hid:
  - id: ble_client_hid_1
    ble_client_id: ble_remote_shutter_tag

text_sensor:
  - platform: ble_client_hid
    ble_client_hid_id: ble_client_hid_1
    name: "Remote Shutter Button - Last Event Usage"

binary_sensor:
  - platform: template
    id: ble_camera_tag_button
    name: "Black Camera Button"
    filters:
      delayed_off: 200ms
  - platform: template
    id: ble_remote_shutter_tag_button
    name: "Remote Shutter Button"
    filters:
      delayed_off: 200ms

sensor:
  # convert the hid event into a the sensor "ble_remote_shutter_tag_button" on and off
  - platform: ble_client_hid
    type: last_event_value
    ble_client_hid_id: ble_client_hid_1
    name: "Remote Shutter Button - Last Event Value"
    on_value:
      then:
        - if:
            condition:
              lambda: "return x == 1;"
            then:
              - binary_sensor.template.publish:
                  id: ble_remote_shutter_tag_button
                  state: ON
        - if:
            condition:
              lambda: "return x == 0;"
            then:
              - binary_sensor.template.publish:
                  id: ble_remote_shutter_tag_button
                  state: OFF

  # This entry registers and awaits notifications for the
  # characteristic that signals button presses. Each time
  # a notification is received, the corresponding binary_sensor
  # is briefly toggled.
  - platform: ble_client
    type: characteristic
    ble_client_id: ble_camera_tag
    name: "Black Camera Button Sensor" # name: "AB Shutter3 Press"
    service_uuid: "00001812-0000-1000-8000-00805F9B34FB" # Full UUID for 0x1812
    characteristic_uuid: "00002A4D-0000-1000-8000-00805F9B34FB" # Common for HID buttons
    notify: true
    update_interval: never
    on_notify:
      then:
        - binary_sensor.template.publish:
            id: ble_camera_tag_button
            state: ON
        - delay: 200ms
        - binary_sensor.template.publish:
            id: ble_camera_tag_button
            state: OFF

  # This entry queries the battery level. Some tags may not
  # support this characteristic, you will see 'Unknown' in the
  # HA frontend.
  - platform: ble_client
    type: characteristic
    ble_client_id: ble_camera_tag
    name: "Black Camera Button Battery"
    service_uuid: "180f" # to find
    characteristic_uuid: "2a19" # to find
    icon: "mdi:battery"
    unit_of_measurement: "%"
  # This entry queries polls the RSSI when the tag is connected.
  - platform: ble_client
    type: rssi
    ble_client_id: ble_camera_tag
    name: "Black Camera Button RSSI"

  # This entry queries the battery level. Some tags may not
  # support this characteristic, you will see 'Unknown' in the
  # HA frontend.
  - platform: ble_client
    type: characteristic
    ble_client_id: ble_remote_shutter_tag
    name: "Remote Shutter Button Battery"
    service_uuid: "180f" # to find
    characteristic_uuid: "2a19" # to find
    icon: "mdi:battery"
    unit_of_measurement: "%"
  # This entry queries polls the RSSI when the tag is connected.
  - platform: ble_client
    type: rssi
    ble_client_id: ble_remote_shutter_tag
    name: "Remote Shutter Button RSSI"
